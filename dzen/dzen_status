#!/bin/sh
# This script will collect information from various sources and output
# on a single line. This output is suitable for applications such as
# dzen.
#
# Information is multiplexed using dmplex. It reads in a format
# "N OUTPUT" where N is a section number, from left to right. A pipe is
# used to make this asynchronous. Whenever something is output into the
# pipe, dmplex will update that section and print it along with the
# others. This means there can be several asynchronous loops with
# different sleep intervals.

ICONDIR="$HOME/.dzen/icons"
FIFO=$(mktemp -u /tmp/$(whoami)-dzen-dmplex.XXXXXXXXXX)
(( $? != 0 )) && FIFO="$HOME/.dzen/dmplex.tmp"
rm -f "$FIFO"
mkfifo "$FIFO" || exit 1

mplex() {
	local section=$1; shift
	echo "$section $* " > $FIFO
}

pacman_icon() {
	local section=$1; shift
	which pacman >/dev/null 2>&1
	(( $? )) && return # Fail silently if `pacman` doesn't exist
	local colour="#d3d7cf";
	# Pacman exits with 0 if there are outdated packages, 1 otherwise
	pacman -Qu >/dev/null 2>&1
	(( $? == 0 )) && colour="#f57900"
	mplex $section "^fg($colour)^i($ICONDIR/pacman.xbm)^fg()" &
}

# Check if packages are up to date. This requires a pacman -Sy to be run
# regularly.
pacman_status() {
	local section=$1; shift
	local inotify=$(which inotifywait 2> /dev/null)
	if [[ ! "x$inotify" = "x" ]]; then
		pacman_icon $section
		while (( 1 )); do
				local file=$(inotifywait -e delete --format "%f" /var/lib/pacman 2>/dev/null)
				[[ $file = "db.lck" ]] && pacman_icon $section
		done &
	else
		while (( 1 )); do
				pacman_icon $section
				sleep 3600;
		done &
	fi
}

dzdate() {
	local section=$1; shift
	while (( 1 )); do
		mplex $section "$(date '+%a %H:%M')"
		sleep 60
	done &
}

pacman_status 16
dzdate 32

tail -f "$FIFO" | dmplex

